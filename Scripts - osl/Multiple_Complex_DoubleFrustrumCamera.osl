shader OslCamera(
    float fov = 90,
    float inBehindDist = 5 [[float min= 0, float max = 1000, float slidermin = 0, float sliderexponent = 4, string page = "Clipping Planes", string label = "Behind clipping depth"]],
    int inFrontCheck = 1 [[string widget = "boolean", string page = "Clipping Planes", string label = "Infinite Far clipping depth"]],
    float inFarDist = 10 [[float min= 0.001, float max = 1000, float slidermin = 1, float sliderexponent = 4, string page = "Clipping Planes", string label = "Far clipping depth"]],
    int numHogelX = 1 [[string widget = "number", float min= 1, string page = "Hogel Options", string label = "Number of columns of hogels"]],
    int numHogelY = 1 [[string widget = "number", float min= 1, string page = "Hogel Options", string label = "Number of rows of hogels"]],

    float CaptureWidth = 1 [[string widget = "number", float min= 0.1, string page = "Capture Region", string label = "Capture Width"]],
    float CaptureHeight = 1 [[string widget = "number", float min= 0.1, string page = "Capture Region", string label = "Capture Height"]],


    output point pos = 0,
    output vector dir = 0,
    output float tMax = 1.0/0.0)
{
    //If we are using a limited far clipping depth will use that plus the near clipping distance instead of infinity
    if(inFrontCheck == 0) { tMax =  inBehindDist + inFarDist;} 

//////////////////////////////Hogel creation Code///////////////////////////////////////

    int sceneResolution[2];
    getattribute("camera:resolution", sceneResolution);

    int pixelXY[2];
    getattribute("pixel:pos", pixelXY);

    int resolutionPerHogel[2];
    resolutionPerHogel[0] = (int)floor((float)sceneResolution[0] / numHogelX);
    resolutionPerHogel[1] = (int)floor((float)sceneResolution[1] / numHogelY);

    //Shift to allow our viewing region to have its (0, 0) coordinate in the center of the region
    float widthShift = floor(0.5 * sceneResolution[0]);
    float heightShift = floor(0.5 * sceneResolution[1]);

    //Potential area for problem look at when testing
    //pixelXY[1] = sceneResolution[1] - pixelXY[1];

    int curHogel[2];
    curHogel[0] = (int)floor(((float)pixelXY[0]) / resolutionPerHogel[0]);
    curHogel[1] = (int)floor(((float)pixelXY[1]) / resolutionPerHogel[1]);

//////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////Position Code////////////////////////////////////////////////////
    float posXChangePerHogel = 0;
    float posYChangePerHogel = 0;

    //Check needed as if we allow any vlaue less then one we either get division by zero  or negative number which both will produce errors
    if( numHogelX > 1 )
    {
        posXChangePerHogel = CaptureWidth / (numHogelX);
    }
    if( numHogelY > 1 )
    {
        posYChangePerHogel = CaptureHeight / (numHogelY);
    }

    //we first shift the pos of the ray to the hogel we are in, then we need to shift it to the middle of that hogel
    vector newPos = vector( posXChangePerHogel * curHogel[0] + (0.5 * posXChangePerHogel) , posYChangePerHogel * curHogel[1] + (0.5 * posYChangePerHogel) , 0);

    //sets the focal point  to the center of the current hogel the ray belongs too.
    pos = P + transform("camera", "world", newPos);

//////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////Direction Code//////////////////////////////////////////////
    //Note: When referencing  image plane within the comments it is related to the image plane of the local hogel, and not the global image plane 

    //Given a pixel will find where inside a hogel it is found in pixels, with the center (0,0) cordinate being in the center of the hogel 
    //so the coordinates go from [-resolutionPerHogel/2 -> resolutionPerHogel/2]
    int hogelCoordinate[2];
    hogelCoordinate[0] = (pixelXY[0] % resolutionPerHogel[0]) - (int)floor(0.5 * resolutionPerHogel[0]);
    hogelCoordinate[1] = (pixelXY[1] % resolutionPerHogel[1]) - (int)floor(0.5 * resolutionPerHogel[1]);

    // Converts the hogelCoordinates into a system based on a new range of (-1.0 -> 1.0)
    //Since we want the values of -1 and 1 to represent the outer edges of the capture plane
    float hogelCoordinatePercent[2];
    hogelCoordinatePercent[0] = 2 * ((float)hogelCoordinate[0] / resolutionPerHogel[0]);
    hogelCoordinatePercent[1] = 2 * ((float)hogelCoordinate[1] / resolutionPerHogel[1]);

    //Given a Fov, this computes the the maximum distance in the x,y plane from the center of the fov, any ray will travel, given the focal length is one
    float tanHalfFov = tan(radians(fov/2));

    //we can determine how far a single ray needs to travel in the x,y directions by comparing where they land on the camera plane, with how far the edges of the viewing plane are
    //Since the edge of the camera plane are represented by hogelCoordinatePercent which has values between -1 and 1 at maximum the x,y distane will be 1 * tanHalfFOV which represents
    //The farthest distance on the capture plane
    float u1 = tanHalfFov * hogelCoordinatePercent[0]; 
    float v1 = tanHalfFov * hogelCoordinatePercent[1];

    //With the now determined new direction for the ray to be pointed, we now adjust for the fact that the position was calculate relative to the 
    //newPos of the hogel we are working in and not 0,0 so we simply shift the ray by the same value to center it on the hogels center
    dir = newPos + vector(u1, v1, -1.0);

    //This is used to allow the creation of the dobule frustrum
    vector dirNormalized = normalize(dir);

//////////////////////////////////////////////////////////////////////////////////////////

    //To allow the double frustrum behaviour we move our pos in the direction opposite of the rays direction
    // By using inBehindDist and the normalized direction we can set our distance away by parameter
    pos = pos - transform("camera", "world",(dirNormalized * inBehindDist));

    dir = transform("camera", "world", dir);
}
